#
golem::fill_desc(
pkg_name = "remotetblworkshop",
pkg_title = "Un titre",
pkg_description = "Une desc.",
author_first_name = "Moi",
author_last_name = "Moimoi",
author_email = "AUTHOR@MAIL.COM",
repo_url = NULL
)
golem::set_golem_options()
rstudioapi::navigateToFile("dev/02_dev.R")
#
attachment::att_amend_desc()
install.packages("attachment")
#
attachment::att_amend_desc()
golem::add_module(name = "unad")
golem::add_fct("pool")
#
attachment::att_amend_desc()
#
attachment::att_amend_desc()
#' pool
#'
#' @description A fct function
#'
#' @importFrom pool dbPool
#'
#' @noRd
pool <-
pool::dbPool(
RSQLite::SQLite(),
dbname = get_golem_config("db_name"),
host = get_golem_config("db_host"),
username = Sys.getenv("DB_USERNAME"),
password = Sys.getenv("DB_PASSWORD")
)
#' pool
#'
#' @description A fct function
#'
#' @importFrom pool dbPool
#'
#' @noRd
pool <-
pool::dbPool(
RSQLite::SQLite(),
dbname = get_golem_config("db_name")
)
#' pool
#'
#' @description A fct function
#'
#' @importFrom pool dbPool
#'
#' @noRd
pool <-
pool::dbPool(
RSQLite::SQLite(),
dbname = get_golem_config("db_name")
)
devtools::load_all(".")
#' pool
#'
#' @description A fct function
#'
#' @importFrom pool dbPool
#'
#' @noRd
pool <-
pool::dbPool(
RSQLite::SQLite(),
dbname = get_golem_config("db_name")
)
devtools::load_all(".")
#' pool
#'
#' @description A fct function
#'
#' @importFrom pool dbPool
#'
#' @noRd
pool <-
pool::dbPool(
RSQLite::SQLite(),
dbname = get_golem_config("db_name")
)
devtools::load_all(".")
#' pool
#'
#' @description A fct function
#'
#' @importFrom pool dbPool
#'
#' @noRd
pool <-
pool::dbPool(
RSQLite::SQLite(),
dbname = get_golem_config("db_name")
)
devtools::load_all(".")
#
attachment::att_amend_desc()
devtools::load_all(".")
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
DBI::dbExecute(
con,
statement = glue::glue("DROP TABLE smoltbl")
)
#' pool
#'
#' @description A fct function
#'
#' @importFrom pool dbPool
#'
#' @noRd
con <-
pool::dbPool(
RSQLite::SQLite(),
dbname = "inst/dev.sqlite"
)
DBI::dbExecute(
con,
statement = glue::glue("DROP TABLE smoltbl")
)
DBI::dbListTables(conn = con)
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
DBI::dbListTables(conn = con)
mytbl_random <-
dplyr::tbl(con, "testtbl") |>
dplyr::filter(var2 == "a") |>
dplyr::slice_sample(n = 100)
mytbl_random
mytbl_random <-
dplyr::tbl(con, "smoltbl")
mytbl_random
?on.exit
df <- dbplyr::sql_render(
mytbl_random
)
DBI::dbRemoveTable(
con,
name = "smoltable"
)
DBI::dbListTables(conn = con)
DBI::dbRemoveTable(
con,
name = "smoltbl"
)
DBI::dbListTables(conn = con)
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
